
CREATE SEQUENCE SQ_CLIENTE START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_PERSONA START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE PACKAGE PK_GESTION_CLIENTES IS
    CuentasAlta EXCEPTION;
    ModificarCuenta EXCEPTION;
    CuentasBaja EXCEPTION;
    AutorizadoExiste EXCEPTION;
    AutorizadoModificar EXCEPTION;
    AutorizadoEliminar EXCEPTION;
    TipoException EXCEPTION;
    AutorizacionNoExiste EXCEPTION;
    PROCEDURE ALTA_CLIENTE(IDENT VARCHAR2, TIPO VARCHAR2, ESTADO CHAR, FECHABAJA DATE, DIRE VARCHAR2, CIU VARCHAR2, CP VARCHAR2, PAIS VARCHAR2, RAZON VARCHAR2, NOM VARCHAR2, APE VARCHAR2, FECHANAC DATE);
    PROCEDURE MODIFICAR_CLIENTE(IDENT VARCHAR2, EST CHAR, BAJA DATE, DIREC VARCHAR2, CIU VARCHAR2, COD INTEGER, PA VARCHAR2);
    PROCEDURE BAJA_CLIENTE(PK INT);
    PROCEDURE ADD_AUTORIZADO(TIPO VARCHAR2, PK INT, EMP INT, IDENTIFICACION VARCHAR2, NOMBRE VARCHAR2, APELLIDOS VARCHAR2, DIRECCION VARCHAR2, FECHA_NACIMIENTO DATE, ESTADO CHAR, FECHAFIN DATE);
    PROCEDURE MODIFICAR_AUTORIZADO(PK INT, EMP INT, NOM VARCHAR2, APEL VARCHAR2, DIREC VARCHAR2, NACI DATE, EST CHAR, FIN DATE, TIP VARCHAR2);
    PROCEDURE ELIMINAR_AUTORIZADO(PK INT, EMP INT);
    
END PK_GESTION_CLIENTES;


create or replace PACKAGE BODY PK_GESTION_CLIENTES IS
   
  PROCEDURE ALTA_CLIENTE(IDENT VARCHAR2, TIPO VARCHAR2, ESTADO CHAR, FECHABAJA DATE, DIRE VARCHAR2, CIU VARCHAR2, CP VARCHAR2, PAIS VARCHAR2, RAZON VARCHAR2, NOM VARCHAR2, APE VARCHAR2, FECHANAC DATE) IS
    condicion INTEGER;
    ID_UNICO  INTEGER;
    BEGIN
        SELECT COUNT(*) INTO condicion FROM CLIENTE WHERE IDENTIFICACION = IDENT;
        IF condicion=1 THEN
            UPDATE CLIENTE SET ESTADO = '1', FECHA_ALTA = SYSDATE WHERE IDENTIFICACION = IDENT;
        ELSE 
            IF (TIPO = 'JURIDICO') THEN
                ID_UNICO := SQ_CLIENTE.NEXTVAL;
                INSERT INTO CLIENTE VALUES(ID_UNICO, IDENT, TIPO, ESTADO, SYSDATE, FECHABAJA, DIRE, CIU, CP, PAIS);
                INSERT INTO EMPRESA VALUES(ID_UNICO, RAZON);
            ELSIF (TIPO = 'FISICO') THEN
                 ID_UNICO := SQ_CLIENTE.NEXTVAL;
                INSERT INTO CLIENTE VALUES(ID_UNICO, IDENT, TIPO, ESTADO, SYSDATE, FECHABAJA, DIRE, CIU, CP, PAIS);
                INSERT INTO INDIVIDUAL VALUES(ID_UNICO, NOM, APE, FECHANAC);
            ELSE RAISE TipoException;
            END IF;
        END IF;
    END;

    PROCEDURE MODIFICAR_CLIENTE(IDENT VARCHAR2, EST CHAR, BAJA DATE, DIREC VARCHAR2, CIU VARCHAR2, COD INTEGER, PA VARCHAR2) IS
    clienteExiste INTEGER;
    BEGIN
        SELECT COUNT(*) INTO clienteExiste FROM CLIENTE WHERE IDENTIFICACION = IDENT;
        IF clienteExiste=1 THEN
            UPDATE CLIENTE SET ESTADO = EST, FECHA_BAJA = BAJA, DIRECCION = DIREC, CIUDAD = CIU, CODIGOPOSTAL = COD, PAIS = PA WHERE IDENTIFICACION = IDENT;
        ELSE RAISE ModificarCuenta;
        END IF;
    END;

   PROCEDURE BAJA_CLIENTE(PK INT) IS
   cuentasAlta INTEGER;
   clienteExiste INTEGER;
   BEGIN
        SELECT COUNT(*) INTO cuentasAlta FROM CUENTA_FINTECH WHERE ESTADO = '1' AND CLIENTE_ID = PK;
        SELECT COUNT(*) INTO clienteExiste FROM CLIENTE WHERE IDENTIFICACION = PK;
        IF cuentasAlta=0 AND clienteExiste=1 THEN
            UPDATE CLIENTE SET ESTADO = '0', FECHA_BAJA = SYSDATE WHERE ID = PK;
        ELSE RAISE CuentasBaja;
        END IF;
   END;

   PROCEDURE ADD_AUTORIZADO(TIPO VARCHAR2, PK INT, EMP INT, IDENTIFICACION VARCHAR2, NOMBRE VARCHAR2, APELLIDOS VARCHAR2, DIRECCION VARCHAR2, FECHA_NACIMIENTO DATE, ESTADO CHAR, FECHAFIN DATE) AS
    personaAutorizadaExiste INTEGER;
    empresaExiste INTEGER;
    ID_UNICO  INTEGER;
    BEGIN
        IF(TIPO NOT LIKE 'CONSULTA' OR TIPO NOT LIKE 'OPERACION') THEN
            RAISE TipoException;
        END IF;
        SELECT COUNT(*) INTO personaAutorizadaExiste FROM PERSONA_AUTORIZADA WHERE ID = PK;
        SELECT COUNT(*) INTO empresaExiste FROM EMPRESA WHERE ID = EMP;
        IF personaAutorizadaExiste=1 AND empresaExiste=1 THEN
            INSERT INTO AUTORIZACION VALUES(TIPO, PK, EMP);
        ELSE 
            ID_UNICO := SQ_PERSONA.NEXTVAL;
            INSERT INTO PERSONA_AUTORIZADA VALUES (ID_UNICO, IDENTIFICACION, NOMBRE, APELLIDOS, DIRECCION, FECHA_NACIMIENTO, ESTADO, SYSDATE, FECHAFIN);
            INSERT INTO AUTORIZACION VALUES(TIPO, ID_UNICO, EMP);
        END IF;
    END;


    PROCEDURE MODIFICAR_AUTORIZADO(PK INT, EMP INT, NOM VARCHAR2, APEL VARCHAR2, DIREC VARCHAR2, NACI DATE, EST CHAR, FIN DATE, TIP VARCHAR2) IS
    personaAutorizadaExiste INTEGER;
    empresaExiste INTEGER;
    autorizacionExiste INTEGER;
    BEGIN
        IF(TIP NOT LIKE 'CONSULTA' OR TIP NOT LIKE 'OPERACION') THEN
            RAISE TipoException;
        END IF;
        SELECT COUNT(*) INTO personaAutorizadaExiste FROM PERSONA_AUTORIZADA WHERE ID = PK;
        SELECT COUNT(*) INTO empresaExiste FROM EMPRESA WHERE ID = EMP;
        SELECT COUNT(*) INTO autorizacionExiste FROM AUTORIZACION WHERE PERSONA_AUTORIZADA_ID = PK AND EMPRESA_ID = EMP;
        IF personaAutorizadaExiste=1 AND empresaExiste=1 AND autorizacionExiste=1 THEN
            UPDATE PERSONA_AUTORIZADA SET NOMBRE = NOM, APELLIDOS = APEL, DIRECCION = DIREC, FECHA_NACIMIENTO = NACI, ESTADO = EST, FECHAFIN = FIN WHERE ID = PK;
            UPDATE AUTORIZACION SET TIPO = TIP WHERE PERSONA_AUTORIZADA_ID = PK AND EMPRESA_ID = EMP;
        ELSE RAISE AutorizadoModificar;
        END IF;
    END;

    PROCEDURE ELIMINAR_AUTORIZADO(PK INT, EMP INT) AS
    autorizacionExiste INTEGER;
    personaExiste INTEGER;
    BEGIN
        SELECT COUNT(*) INTO autorizacionExiste FROM AUTORIZACION WHERE PERSONA_AUTORIZADA_ID LIKE PK AND EMPRESA_ID LIKE EMP;
        IF autorizacionExiste=1 THEN
            DELETE FROM AUTORIZACION WHERE PERSONA_AUTORIZADA_ID = PK AND EMPRESA_ID = EMP;
        ELSE RAISE AutorizacionNoExiste;
        END IF;
        SELECT COUNT(*) INTO personaExiste FROM AUTORIZACION WHERE PERSONA_AUTORIZADA_ID = PK;
        IF personaExiste=1 THEN
            UPDATE PERSONA_AUTORIZADA SET ESTADO = 'BORRADO', FECHAFIN = SYSDATE WHERE ID = PK;
        ELSE RAISE AutorizadoEliminar;
        END IF;
    END;


END PK_GESTION_CLIENTES;
/

CREATE OR REPLACE PACKAGE PK_GESTION_CUENTAS AS
    ClienteException EXCEPTION;
    CuentaException EXCEPTION;
    ReferenciaException EXCEPTION;
    SaldoException EXCEPTION;
    PROCEDURE APERTURA_CUENTA_POOLED(ID_CLIENTE INTEGER, IBN VARCHAR2, SWFT VARCHAR2, ESTA CHAR, FECHADECIERRRE DATE, CLASI VARCHAR2);
    PROCEDURE APERTURA_CUENTA_SEGREGATED(ID_CLIENTE INTEGER, IBN VARCHAR2, SWFT VARCHAR2, ESTA CHAR, FECHADECIERRRE DATE, CLASI VARCHAR2, COMISION DECIMAL, REFERENCIA VARCHAR2);
    PROCEDURE CIERRE_CUENTA_POOLED(IBN VARCHAR2);
    PROCEDURE CIERRE_CUENTA_SEGREGADA(IBN VARCHAR2);
    

END PK_GESTION_CUENTAS;
/
create or replace PACKAGE BODY PK_GESTION_CUENTAS AS
    PROCEDURE APERTURA_CUENTA_POOLED(ID_CLIENTE INTEGER, IBN VARCHAR2, SWFT VARCHAR2, ESTA CHAR, FECHADECIERRRE DATE, CLASI VARCHAR2) IS
    clienteNoAlta INTEGER;
    cuentaExiste INTEGER;
    BEGIN
        SELECT COUNT(*) INTO clienteNoAlta FROM CLIENTE WHERE ID = ID_CLIENTE AND ESTADO LIKE '1';
        IF clienteNoAlta=0 THEN
            RAISE ClienteException;
        END IF;
        SELECT COUNT(*) INTO cuentaExiste FROM CUENTA WHERE IBAN LIKE IBN;
        IF cuentaExiste=1 THEN
            RAISE CuentaException;
        END IF;

        INSERT INTO CUENTA VALUES(IBN, SWFT);
        INSERT INTO CUENTA_FINTECH VALUES(IBN, ESTA, SYSDATE, FECHADECIERRE, CLASI, ID_CLIENTE);
        INSERT INTO POOLED_ACCOUNT VALUES(IBN);

    END;

    PROCEDURE APERTURA_CUENTA_SEGREGATED(ID_CLIENTE INTEGER, IBN VARCHAR2, SWFT VARCHAR2, ESTA CHAR, FECHADECIERRRE DATE, CLASI VARCHAR2, COMISION DECIMAL, REFERENCIA VARCHAR2) IS
    clienteNoAlta INTEGER;
    cuentaExiste INTEGER;
    cuentaRefNoExiste INTEGER;
    BEGIN
        SELECT COUNT(*) INTO clienteNoAlta FROM CLIENTE WHERE ID = ID_CLIENTE AND ESTADO LIKE '1';
        IF clienteNoAlta=0 THEN
            RAISE ClienteException;
        END IF;
        SELECT COUNT(*) INTO cuentaExiste FROM CUENTA WHERE IBAN LIKE IBN;
        IF cuentaExiste=1 THEN
            RAISE CuentaException;
        END IF;
        SELECT COUNT(*) INTO cuentaRefNoExiste FROM CUENTA WHERE IBAN LIKE REFERENCIA;
        IF cuentaRefNoExiste=0 THEN
            RAISE ReferenciaException;
        END IF;
        INSERT INTO CUENTA VALUES(IBN, SWFT);
        INSERT INTO CUENTA_FINTECH VALUES(IBN, ESTA, SYSDATE, FECHADECIERRE, CLASI, ID_CLIENTE);
        INSERT INTO SEGREGADA VALUES(IBN, COMISION, REFERENCIA);

    END;

    PROCEDURE CIERRE_CUENTA_POOLED(IBN VARCHAR2) IS
    cuentaNoExiste INTEGER;
    saldo FLOAT;
    BEGIN       
        SELECT COUNT(*) INTO cuentaNoExiste FROM CUENTA WHERE IBAN LIKE IBN;
        IF cuentaNoExiste = 0 THEN
            RAISE CuentaException;
        END IF;
        SELECT SUM(SALDO) INTO saldo FROM DEPOSITADA_EN WHERE POOLED_ACCOUNT_IBAN LIKE IBN;
        IF saldo = 0 THEN
            UPDATE CUENTA_FINTECH SET ESTADO = '0', FECHA_CIERRE = SYSDATE WHERE IBAN = IBN;
        ELSE RAISE SaldoException;
        END IF;
    END;

    PROCEDURE CIERRE_CUENTA_SEGREGADA(IBN VARCHAR2) IS
    cuentaNoExiste INTEGER;
    saldo FLOAT;
    BEGIN 
        SELECT COUNT(*) INTO cuentaNoExiste FROM CUENTA WHERE IBAN LIKE IBN;
        IF cuentaNoExiste = 0 THEN
            RAISE CuentaException;
        END IF;
        SELECT SALDO INTO saldo FROM CUENTA_REFERENCIA WHERE IBAN LIKE (SELECT CUENTA_REFERENCIA_IBAN FROM SEGREGADA WHERE IBAN LIKE IBN);
        IF saldo = 0 THEN
            UPDATE CUENTA_FINTECH SET ESTADO = '0', FECHA_CIERRE = SYSDATE WHERE IBAN = IBN;
        ELSE RAISE SaldoException;
        END IF;
    END;

END PK_GESTION_CUENTAS;

CREATE OR REPLACE VIEW V_SALDO_INDIVIDUAL(IDENTIFICACION, IBAN, SALDO, ABREVIATURA, CAMBIOEURO) AS 
SELECT INDIVIDUAL.ID, CUENTA_REFERENCIA.IBAN, CUENTA_REFERENCIA.SALDO, CUENTA_REFERENCIA.DIVISA_ABREVIATURA, DIVISA.CAMBIOEURO
FROM INDIVIDUAL, CUENTA_FINTECH, SEGREGADA, CUENTA_REFERENCIA, DIVISA WHERE INDIVIDUAL.ID = CUENTA_FINTECH.CLIENTE_ID AND CUENTA_FINTECH.IBAN = SEGREGADA.IBAN AND SEGREGADA.CUENTA_REFERENCIA_IBAN = SEGREGADA.IBAN AND DIVISA.ABREVIATURA = CUENTA_REFERENCIA.DIVISA_ABREVIATURA;

CREATE OR REPLACE VIEW V_SALDO_AUTORIZADO(IDENTIFICACION, IBAN, SALDO, ABREVIATURA, CAMBIOEURO) AS 
SELECT PERSONA_AUTORIZADA.ID, CUENTA_REFERENCIA.IBAN, CUENTA_REFERENCIA.SALDO, CUENTA_REFERENCIA.DIVISA_ABREVIATURA, DIVISA.CAMBIOEURO
FROM PERSONA_AUTORIZADA, AUTORIZACION, EMPRESA, CUENTA_FINTECH, SEGREGADA, CUENTA_REFERENCIA, DIVISA WHERE AUTORIZACION.PERSONA_AUTORIZADA_ID = PERSONA_AUTORIZADA.ID AND AUTORIZACION.EMPRESA_ID = EMPRESA.ID AND EMPRESA.ID = CUENTA_FINTECH.CLIENTE_ID AND CUENTA_FINTECH.IBAN = SEGREGADA.IBAN AND SEGREGADA.CUENTA_REFERENCIA_IBAN = SEGREGADA.IBAN AND DIVISA.ABREVIATURA = CUENTA_REFERENCIA.DIVISA_ABREVIATURA;

CREATE SEQUENCE SQ_TRANSACCION START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_TRANSACCION BEFORE INSERT ON TRANSACCION FOR EACH ROW
BEGIN
    SELECT SQ_TRANSACCION.NEXTVAL INTO :NEW.ID_UNICO FROM DUAL;
END;



CREATE OR REPLACE VIEW V_TARJETA_MENSUAL
(IDENTIFICACION, NUMERO_TARJETA, GASTO, ABREVIATURA) AS 
SELECT CLIENTE.IDENTIFICACION, TARJETA.NUMERO, SUM(TRANSACCION.CANTIDAD), TRANSACCION.DIVISA_ABREVIATURA FROM CLIENTE, TRANSACCION, TARJETA, CUENTA_FINTECH WHERE CLIENTE.ID = CUENTA_FINTECH.CLIENTE_ID AND CUENTA_FINTECH.IBAN = TARJETA.CUENTA_IBAN AND CUENTA_FINTECH.IBAN = TRANSACCION.CUENTA_IBAN GROUP BY TRANSACCION.DIVISA_ABREVIATURA, CLIENTE.IDENTIFICACION, TARJETA.NUMERO;

CREATE OR REPLACE VIEW V_TARJETA_PENDIENTES
(IDENTIFICACION, NUMERO_TARJETA, PENDIENTES, ABREVIATURA) AS 
SELECT CLIENTE.IDENTIFICACION, TARJETA.NUMERO, SUM(TRANSACCION.CANTIDAD),  TRANSACCION.DIVISA_ABREVIATURA FROM CLIENTE, TRANSACCION, TARJETA, CUENTA_FINTECH WHERE CLIENTE.ID = CUENTA_FINTECH.CLIENTE_ID AND CUENTA_FINTECH.IBAN = TARJETA.CUENTA_IBAN AND CUENTA_FINTECH.IBAN = TRANSACCION.CUENTA_IBAN GROUP BY TRANSACCION.DIVISA_ABREVIATURA, CLIENTE.IDENTIFICACION, TARJETA.NUMERO;


CREATE OR REPLACE PROCEDURE P_COBRO AS
    BEGIN 
        FOR i IN (SELECT * FROM MOVIMIENTOS WHERE MODOOPERACION LIKE 'DEBITO') LOOP
            NULL;
        END LOOP;
        
    END;
    
CREATE OR REPLACE PACKAGE PK_OPERATIVA IS
    PROCEDURE INSERT_TRANSACCION(IBAN_ORIGEN VARCHAR2, IBAN_DESTINO VARCHAR2, DINERITO DOUBLE);
    PROCEDURE CAMBIO_DIVISA(IBAN VARCHAR2, DIVISA_ORIGEN VARCHAR2, DIVISA_DESTINO VARCHAR2, DINERITO DOUBLE);
    
END PK_OPERATIVA;


CREATE OR REPLACE PACKAGE BODY PK_OPERATIVA IS
    
END PK_OPERATIVA;
